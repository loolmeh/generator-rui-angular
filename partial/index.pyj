yeoman = require('yeoman-generator')
path = require('path')
genutils = require('../utils')
util = require('util')

BaseGen = genutils.BaseGen
Base = yeoman.generators.Base


class GenExtra:

    @staticmethod
    def set_opts():
        this.no_css = this.options['nocss'] or False
        this.include = this.options['include'] or False
        this.tpl_path = path.join(this.path, this.name+'-ctrl.'+this.ml)

    @staticmethod
    def set_marker():
        this._set_marker('include_marker', 'markup', 3)

    @staticmethod
    def set_ml_tpl():
        if this.ml == 'html':
            this.ml_tpl = """
<div>
template for the <%= name %> controller 
</div>
"""
        if this.ml == 'pyml':
            this.ml_tpl = """
div:
    template for the <%= name %> controller
"""

        if this.ml == 'jade':
            this.ml_tpl = """
div
    template for the <%= name %> controller 
"""
        this.ml_tpl = this.engine(this.ml_tpl, {name: this.name}).replace(/^\n/, '')

    @staticmethod
    def set_include_tpl():
        if this.ml == 'html':
            this.include_tpl = """
            <div ng-controller="<%= name %>_ctrl">
                <div ng-include="'<%= tpl_path %>'"></div>
            </div>
"""
        if this.ml == 'pyml':
            this.include_tpl = """
            div(ng-controller="<%= name %>_ctrl"):
                div(ng-include="'<%= tpl_path %>'")
"""
        if this.ml == 'jade':
            this.include_tpl = """
            div(ng-controller="<%= name %>_ctrl")
                div(ng-include="'<%= tpl_path %>'")
"""
        this.include_tpl = this.engine(this.include_tpl, {name: this.name, tpl_path: this.tpl_path}).replace(/^\n/, '')

    @staticmethod
    def copy_template():
        this._write_tpl(this.tpl_path, this.ml_tpl)

    @staticmethod
    def write_ctrl():
        if typeof(this._path) == 'undefined' or this._path == '.':
            path = '.'
        else:
            path = this._path

        this.invoke('rui-angular:controller',
        {
            args:   [this.name, path, this.module],
            options: {
                js: this.options['js'],
                pyj: this.options['pyj'],
                coffee: this.options['coffee'],
            },
        }
        )

    @staticmethod
    def write_route():
        if not this.include:
            this.invoke('rui-angular:route',
            {
                args: [this.name+'-ctrl', this.url, this.name+'_ctrl', this.module],
                options: {
                    js: this.options['js'],
                    pyj: this.options['pyj'],
                    coffee: this.options['coffee'],
                },
            }
            )

    @staticmethod
    def write_include():
        if this.include:
            this._ins_bmarker(this.index, this.include_tpl, this.include_marker)

    @staticmethod
    def write_ss():
        if not this.no_css:
            this._write_ss()
             

class PartialGen:

    def __init__(self):
        Base.apply(self, arguments)
        self._arg('name')
        self._arg('url')
        self._arg('path')
        self._path = self.path
        self._arg('module')
        self._opt('js')
        self._opt('pyj')
        self._opt('coffee')
        self._opt('pyml')
        self._opt('html')
        self._opt('jade')
        self._opt('sass')
        self._opt('less')
        self._opt('css')
        self._opt('nocss')
        self._opt('include')

util.inherits(PartialGen, Base)
mixin(PartialGen.prototype, BaseGen)
mixin(PartialGen.prototype, GenExtra)

JS('module.exports') = PartialGen
